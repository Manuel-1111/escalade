# Dans ce document plus on dessend plus la modelisation s'approche de la réalité 
#Premier programme assureur passif + pas de slack 
import matplotlib.pyplot as plt

# Paramètres ici rentré a la main mais faudrat les mettre en lien avec l'interface
m = 70  # kg
g = 9.81  # m/s²
L0 = 10  # longueur de corde avant la chute (m)
k = 1500  # raideur approximative de la corde dynamique (N/m)
dt = 0.01  # pas de temps (s)
Tmax = 5  # temps max (s) de la simulation 

# Conditions initiales
y = 0  # position par rapport au point de chute
v = 0  # vitesse
t = 0

# Listes pour stocker les résultats
positions = []
vitesses = []
temps = []

while t < Tmax:
    if y > L0:
        F_spring = -k * (y - L0) # Force de rapelle vers le haut car y > L
    else:
        F_spring = 0  # la corde est détendue

    P = m * g #poids
    F_total = P + F_spring
    a = F_total / m

    v += a * dt
    y += v * dt
    t += dt

    positions.append(y)
    vitesses.append(v)
    temps.append(t)

# Affichage
plt.figure(figsize=(10,5))
plt.subplot(2,1,1)
plt.plot(temps, positions)
plt.title("Chute d'un grimpeur avec assureur passif")
plt.ylabel("Position (m)")

plt.subplot(2,1,2)
plt.plot(temps, vitesses)
plt.ylabel("Vitesse (m/s)")
plt.xlabel("Temps (s)")
plt.tight_layout()
plt.show()











# deuxieme programe : assureur passif + slack
import matplotlib.pyplot as plt

# === Paramètres physiques ===
m = 70             # masse du grimpeur en kg
g = 9.81           # gravité en m/s²
L0 = 10            # longueur de corde normale en m
slack = 2          # mou supplémentaire en m (à tester avec 0 puis >0)
k = 1500           # raideur (spring constant) de la corde en N/m
dt = 0.01          # pas de temps en secondes
Tmax = 5           # durée max de la simulation

# === Calcul de la longueur totale de corde ===
L_total = L0 + slack  # longueur effective de la corde avec mou

# === Conditions initiales ===
y = 0       # position verticale (chute vers le bas → y > 0)
v = 0       # vitesse initiale
t = 0       # temps initial

# === Stockage des résultats ===
positions = []
vitesses = []
temps = []

# === Boucle de simulation ===
while t < Tmax:
    # Si la corde commence à s'étirer (le grimpeur a chuté plus bas que la longueur de corde)
    if y > L_total:
        F_spring = -k * (y - L_total)  # force de rappel vers le haut
    else:
        F_spring = 0  # la corde est détendue

    F_grav = m * g  # force gravitationnelle vers le bas
    F_total = F_grav + F_spring  # somme des forces (positive = vers le bas)
    a = F_total / m  # accélération résultante

    # Mise à jour des états avec intégration d’Euler
    v += a * dt
    y += v * dt
    t += dt

    # Sauvegarde des résultats
    positions.append(y)
    vitesses.append(v)
    temps.append(t)

# === Affichage ===
plt.figure(figsize=(10, 6))

plt.subplot(2, 1, 1)
plt.plot(temps, positions)
plt.ylabel("Position (m)")
plt.title(f"Chute avec slack = {slack} m")

plt.subplot(2, 1, 2)
plt.plot(temps, vitesses)
plt.ylabel("Vitesse (m/s)")
plt.xlabel("Temps (s)")

plt.tight_layout()
plt.show()






# ce programme est faut mais tout n'est pas a jeter , ce qui est pertinant c'est la modelisation du saut de l'assureur mais il est mal lié au grimpeur 
# troisième programme: modelisation de la chute d'un grimpeur avec un assureur qui saute , l'assureur est modelisé par une masse qui fait un saut en forme sinusoidale + pas de mou 
# dans ce programe l'assureur n'es pas lié au grimpeur par ca masse , pour plus de realisme on devreit modelisé l'assureur comme une masse relié a une autre masse ( le grimpeur ) par une corde car 
#quand la corde se tend, il peut être soulevé, reculer ou résister (en fonction de son poids, position et type d’assurage).
import matplotlib.pyplot as plt
import numpy as np

# === Paramètres physiques ===
m = 70              # Masse du grimpeur en kg
g = 9.81            # Gravité (m/s²)
L0 = 10             # Longueur de corde (sans mou)
slack = 0           # Mou ajouté volontairement (ici 0)
k = 1500            # Raideur de la corde (N/m)
dt = 0.01           # Pas de temps
Tmax = 5            # Durée totale

# === Paramètres du "saut" de l'assureur ===
h_saut = 0.5        # Hauteur du saut (m)
d_saut = 0.5        # Durée totale du saut (s)

# Fonction qui donne le déplacement vertical du point d'ancrage en fonction du temps 
#Elle représente comment le point d'ancrage de la corde monte puis redescend quand l’assureur saute.
def mouvement_assureur(t):
    if t < d_saut:
        # Mouvement sinusoïdal vertical doux : max au milieu du saut
        return h_saut * np.sin(np.pi * t / d_saut)
    else:
        return 0

# === Conditions initiales ===
y = 0       # Position du grimpeur (vers le bas, 0 = point d'ancrage initial)
v = 0       # Vitesse initiale
t = 0       # Temps

# === Stockage des résultats ===
positions = []
vitesses = []
temps = []

# === Boucle de simulation ===
while t < Tmax:
    # Position du point d'ancrage du grimpeur à cet instant
    ancrage_mobile = L0 + slack + mouvement_assureur(t)

    # Si la corde est tendue
    if y > ancrage_mobile:
        F_spring = -k * (y - ancrage_mobile)  # Rappel vers le haut
    else:
        F_spring = 0

    # Force gravitationnelle
    F_grav = m * g

    # Résultat des forces
    F_total = F_grav + F_spring
    a = F_total / m

    # Intégration numérique (Euler)
    v += a * dt
    y += v * dt
    t += dt

    # Stockage
    positions.append(y)
    vitesses.append(v)
    temps.append(t)

# === Affichage ===
plt.figure(figsize=(10, 6))

plt.subplot(2, 1, 1)
plt.plot(temps, positions, label="Position du grimpeur")
plt.plot(temps, [L0 + slack + mouvement_assureur(ti) for ti in temps], '--', label="Point d'ancrage")
plt.ylabel("Position (m)")
plt.title("Chute avec assureur qui saute")
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(temps, vitesses)
plt.ylabel("Vitesse (m/s)")
plt.xlabel("Temps (s)")

plt.tight_layout()
plt.show



# ce qu'on avait mal pris en compte c'eqt que si l’assureur monte pendant cette phase, il ajoute du mou virtuel, donc le grimpeur chute plus longtemps avant que la corde se tende.
#Concrètement :Quand l’assureur monte de h_saut, c’est comme si on ajoutait h_saut de slack supplémentaire pendant le saut.
# Pour l'instant j'ai pas resolut le problème !




# enfin on crée un programme qui combine les diferrents cas dans le but de pouvoirs les avoir sur un même graph pour pouvoir les comparée 
# il faut changé le paramètre slack et le mouvement de l’assureur selon le cas
# ici puisse que le probleme du troisieme programme n'a pas encore été resolut pour distingué les courbes sans mou + assureur inactif et la courbe sans mou + assureur actif j'ai ajouté artificiélement 
# 1m de slack qui represente le mou gagné quand l'assureur saute, on distingue alors 3 courbes  

import matplotlib.pyplot as plt
import numpy as np

# === Constantes physiques ===
m = 70              # Masse du grimpeur (kg)
g = 9.81            # Gravité (m/s²)
L0 = 10             # Longueur de corde (m)
k = 1500            # Raideur de la corde (N/m)
dt = 0.01           # Pas de temps (s)
Tmax = 5            # Durée de la simulation (s)
# === Temps commun à tous les cas ===
temps = np.arange(0, Tmax, dt)

# === Paramètres du saut de l'assureur ===
h_saut = 0.5        # Hauteur max du saut (m)
d_saut = 0.5        # Durée totale du saut (s)

# Fonction : mouvement vertical de l’assureur
def mouvement_assureur(t, saut=False):
    if saut and t < d_saut:
        return h_saut * np.sin(np.pi * t / d_saut)
    else:
        return 0

# Fonction générique de simulation
def simuler_chute(slack=0, saut=False, temps=None):
    y = 0
    v = 0

    positions = []
    vitesses = []

    for t in temps:
        ancrage_mobile = L0 + slack + mouvement_assureur(t, saut)

        if y > ancrage_mobile:
            F_spring = -k * (y - ancrage_mobile)
        else:
            F_spring = 0

        a = (m * g + F_spring) / m
        v += a * dt
        y += v * dt

        positions.append(y)
        vitesses.append(v)

    return positions, vitesses

# === Lancement des trois simulations ===
# 1. Assureur fixe, pas de mou
y1, v1 = simuler_chute(slack=0, saut=False, temps=temps)

# 2. Assureur fixe, avec mou
y2, v2 = simuler_chute(slack=2, saut=False, temps=temps)  # 2m de mou en plus

# 3. Assureur qui saute
y3, v3 = simuler_chute(slack=1, saut=True,  temps=temps)   # c'est ici que l'ajout de slack c'est fait normalement puisse qu'on modelise un assureur qui saute sans donné de mou avant on aurait du marqué slack= 0

# === Tracés ===
plt.figure(figsize=(12, 6))

# Position
plt.subplot(2, 1, 1)
plt.plot(temps, y1, label="Fixe, sans mou")
plt.plot(temps, y2, label="Fixe, avec mou")
plt.plot(temps, y3, label="Assureur qui saute")
plt.ylabel("Position du grimpeur (m)")
plt.title("Comparaison des positions (grimpeur)")
plt.legend()

# Vitesse
plt.subplot(2, 1, 2)
plt.plot(temps, y1, label="Fixe, sans mou")
plt.plot(temps, y2, label="Fixe, avec mou")
plt.plot(temps, y3, label="Assureur qui saute")
plt.ylabel("Vitesse (m/s)")
plt.xlabel("Temps (s)")
plt.title("Comparaison des vitesses (grimpeur)")
plt.legend()

plt.tight_layout()







# Amortissement:
# il faut considéré les frottemments et pour que le grimpeur n'oscille pas il faut se placer en regime critique 
# on reprend avec l'assureur passif 
import matplotlib.pyplot as plt
import numpy as np

# === Paramètres physiques ===
m = 70          # Masse du grimpeur (kg)
g = 9.81        # Gravité (m/s²)
L0 = 10         # Longueur de la corde avant chute (m)
k = 1500        # Raideur de la corde (N/m)

# Calcul de l'amortissement critique
b = 2 * np.sqrt(m * k)  # Amortissement critique (kg/s)

dt = 0.01       # Pas de temps (s)
Tmax = 5        # Durée totale de la simulation (s)

# === Conditions initiales ===
y = 0           # Position du grimpeur (m)
v = 0           # Vitesse (m/s)
t = 0           # Temps (s)

# === Listes pour les résultats ===
positions = []
vitesses = []
temps = []

# === Simulation ===
while t < Tmax:
    if y > L0:
        F_spring = -k * (y - L0)     # Force élastique (ressort)
        F_damping = -b * v           # Force d’amortissement critique
    else:
        F_spring = 0
        F_damping = 0

    P = m * g                        # Poids
    F_total = P + F_spring + F_damping
    a = F_total / m                 # Accélération

    v += a * dt
    y += v * dt
    t += dt

    positions.append(y)
    vitesses.append(v)
    temps.append(t)

# === Affichage ===
plt.figure(figsize=(10, 5))

plt.subplot(2, 1, 1)
plt.plot(temps, positions)
plt.title("Chute d’un grimpeur assureur passif  – amortissement critique (pas d'oscillation)")
plt.ylabel("Position (m)")

plt.subplot(2, 1, 2)
plt.plot(temps, vitesses, color='orange')
plt.ylabel("Vitesse (m/s)")
plt.xlabel("Temps (s)")

plt.tight_layout()
plt.show()
plt.show()



# avec du slack et un amortissement critique 
import matplotlib.pyplot as plt
import numpy as np

# === Paramètres ===
m = 70               # Masse du grimpeur (kg)
g = 9.81             # Gravité (m/s²)
L0 = 10              # Longueur de corde initiale (m)
slack = 2            # Mou supplémentaire (m)
k = 1500             # Raideur de la corde (N/m)

# Calcul de l’amortissement critique
b = 2 * np.sqrt(m * k)  # Amortissement critique (kg/s)

dt = 0.01             # Pas de temps (s)
Tmax = 5              # Temps total de simulation (s)

# === Conditions initiales ===
y = 0                 # Position (m)
v = 0                 # Vitesse (m/s)
t = 0                 # Temps (s)

# === Résultats à stocker ===
positions = []
vitesses = []
temps = []

# === Simulation ===
while t < Tmax:
    # Longueur totale de corde avant tension (avec le slack)
    L_effective = L0 + slack

    # La corde agit seulement si y dépasse L_effective
    if y > L_effective:
        F_spring = -k * (y - L_effective)  # Force élastique
        F_damping = -b * v                 # Force d’amortissement
    else:
        F_spring = 0
        F_damping = 0

    P = m * g
    F_total = P + F_spring + F_damping
    a = F_total / m

    v += a * dt
    y += v * dt
    t += dt

    positions.append(y)
    vitesses.append(v)
    temps.append(t)

# === Affichage ===
plt.figure(figsize=(10, 5))

plt.subplot(2, 1, 1)
plt.plot(temps, positions)
plt.title("Chute d’un grimpeur avec slack et amortissement critique")
plt.ylabel("Position (m)")

plt.subplot(2, 1, 2)
plt.plot(temps, vitesses, color="orange")
plt.ylabel("Vitesse (m/s)")
plt.xlabel("Temps (s)")

plt.tight_layout()
plt.show()






# Nouvelle methode pour la chute du grimpeur avec l'assureur qui saute Nouveau Flop
# Dans ce programme l'assureur décole completement lol
# Attention l'origine des point n'est pas pris au même endroit que precedement
#Le point d’ancrage est fixe (renvoi en haut), le grimpeur tombe à partir de la hauteur du point d'ancrage (0 m),
#l'assureur est au sol au départ (hauteur = 0 m),quand la corde se tend, la force est transmise des deux côtés : grimpeur ralenti + assureur tiré,

import matplotlib.pyplot as plt
import numpy as np

# === Paramètres physiques ===
m1 = 70      # Masse du grimpeur (kg)
m2 = 65      # Masse de l’assureur (kg)
g = 9.81     # Gravité (m/s²)
k = 1500     # Raideur de la corde (N/m)
b = 2 * np.sqrt(m1 * k)  # Amortissement critique pour grimpeur
L0 = 10      # Longueur de la corde détendue (m)

# === Temps ===
dt = 0.01
Tmax = 5

# === Conditions initiales ===
y1 = 0       # Position du grimpeur (0 = point d’ancrage)
v1 = 0       # Vitesse du grimpeur
y2 = -L0     # Position de l’assureur (au sol, corde détendue)
v2 = 0       # Vitesse de l’assureur
t = 0

# === Stockage des données ===
temps = []
positions_grimpeur = []
positions_assureur = []
vitesses_grimpeur = []
vitesses_assureur = []

# === Boucle de simulation ===
while t < Tmax:
    # Distance entre grimpeur et assureur
    L = y1 - y2
    if L > L0:
        # Corde tendue : force de rappel + amortissement
        F_spring = -k * (L - L0)
        F_damping = -b * (v1 - v2)
    else:
        F_spring = 0
        F_damping = 0

    # Forces totales
    F1 = m1 * g + F_spring + F_damping
    F2 = m2 * g - F_spring - F_damping

    # Accélérations
    a1 = F1 / m1
    a2 = F2 / m2

    # Mise à jour des vitesses et positions
    v1 += a1 * dt
    y1 += v1 * dt
    v2 += a2 * dt
    y2 += v2 * dt
    t += dt

    # Enregistrement
    temps.append(t)
    positions_grimpeur.append(y1)
    positions_assureur.append(y2)
    vitesses_grimpeur.append(v1)
    vitesses_assureur.append(v2)

# === Affichage des résultats ===
plt.figure(figsize=(10, 6))

plt.subplot(2, 1, 1)
plt.plot(temps, positions_grimpeur, label="Grimpeur")
plt.plot(temps, positions_assureur, label="Assureur")
plt.ylabel("Position (m)")
plt.title("Modèle grimpeur + assureur (deux masses reliées)")
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(temps, vitesses_grimpeur, label="Grimpeur")
plt.plot(temps, vitesses_assureur, label="Assureur")
plt.ylabel("Vitesse (m/s)")
plt.xlabel("Temps (s)")
plt.legend()

plt.tight_layout()
plt.show()







#un assureur qui ne s'envolle pas ! On y croyait plus ...
import matplotlib.pyplot as plt
import numpy as np

# Paramètres physiques
m_c = 70   # masse du grimpeur (kg)
m_a = 75   # masse de l'assureur (kg)
g = 9.81   # gravité (m/s²)
L0 = 10    # longueur de corde initiale (m)
k = 1500   # raideur de la corde (N/m)

# Amortissement critique pour le système grimpeur-corde
b_crit = 2 * np.sqrt(k * m_c)
b = 0.8 * b_crit  # sous-amorti léger

# Paramètres de simulation
dt = 0.01       # pas de temps (s)
Tmax = 5        # durée max (s)
steps = int(Tmax / dt)

# Conditions initiales
y_c = 0         # position du grimpeur (m)
v_c = 0         # vitesse du grimpeur (m/s)
y_a = 0         # position de l'assureur (m)
v_a = 0         # vitesse de l'assureur (m/s)

# Listes pour stocker les données
positions_c, vitesses_c = [], []
positions_a, vitesses_a = [], []
temps = []

# Boucle de simulation
for i in range(steps):
    t = i * dt
    temps.append(t)

    # Distance entre les deux masses
    d = y_c - y_a

    # Corde tendue ?
    if d > L0:
        extension = d - L0
        v_rel = v_c - v_a
        F_spring = -k * extension
        F_damping = -b * v_rel
        F_total = F_spring + F_damping
    else:
        F_total = 0

    # Forces sur le grimpeur et l'assureur
    a_c = g + F_total / m_c      # vers le bas
    a_a = -g - F_total / m_a     # vers le haut (car on est en coordonnée vers le bas)

    # Intégration (Euler explicite)
    v_c += a_c * dt
    y_c += v_c * dt

    v_a += a_a * dt
    y_a += v_a * dt

    # Sauvegarde des données
    positions_c.append(y_c)
    vitesses_c.append(v_c)
    positions_a.append(y_a)
    vitesses_a.append(v_a)
plt.figure(figsize=(10, 6))

# --- Position ---
plt.subplot(2, 1, 1)
plt.plot(temps, positions_c, label="Grimpeur (assureur qui saute)", color='green')
plt.ylabel("Position du grimpeur (m)")
plt.title("Chute avec assureur qui saute")
plt.grid(True)
plt.legend()

# --- Vitesse ---
plt.subplot(2, 1, 2)
plt.plot(temps, vitesses_c, label="Grimpeur (assureur qui saute)", color='green')
plt.ylabel("Vitesse du grimpeur (m/s)")
plt.xlabel("Temps (s)")
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()









# ON AVANCE! 
#coherant avec la réalité 
# 1 Forme générale des courbes:
#Le grimpeur accélère en chute libre, puis la corde se tend, absorbe l’énergie, et freine brutalement la chute.
#Ensuite, le grimpeur ne repart pas vraiment vers le haut donc l'absence d’oscillations nettes est réaliste.
#Le cas avec assureur qui saute montre bien une accélération plus longue (le freinage est un peu retardé), donc une chute plus “douce” mais plus longue en distance.
# 2 Ordre des courbes
# Sans mou (bleu) → chute la plus courte.
# Avec mou (orange) → chute plus longue (plus d’énergie à dissiper, plus de vitesse max).
#Assureur qui saute (vert) → chute la plus douce (moins de décélération brutale), mais position finale un peu plus basse. Très réaliste aussi.
# 3 Vitesse max : le pic est plus élevé avec du mou, ce qui est logique, car le grimpeur tombe plus longtemps avant d’être freiné.


import numpy as np
import matplotlib.pyplot as plt

# --- Paramètres physiques ---
m = 70         # Masse du grimpeur (kg)
g = 9.81       # Gravité (m/s²)
L0 = 10        # Longueur de corde initiale (m)
k = 1500       # Raideur de la corde (N/m)
b = 2 * np.sqrt(m * k)  # Amortissement critique
dt = 0.001     # Pas de temps (s)
Tmax = 5       # Durée de la simulation (s)
slack = 2      # Mou ajouté dans la corde (cas 2)
saut_assureur = 1  # Hauteur du saut de l'assureur (cas 3)

# --- Fonctions de simulation ---
def simulate_chute(L0_effectif, mouvement_point_fixe=None):
    y = 0
    v = 0
    t = 0
    pos = []
    vit = []
    temps = []

    while t < Tmax:
        # Position du point d’ancrage (optionnel)
        if mouvement_point_fixe:
            y_ancrage = mouvement_point_fixe(t)
        else:
            y_ancrage = 0

        # Allongement de la corde (si tendue)
        extension = y - y_ancrage - L0_effectif
        if extension > 0:
            F_spring = -k * extension
            F_damping = -b * v
        else:
            F_spring = 0
            F_damping = 0

        F_tot = m * g + F_spring + F_damping
        a = F_tot / m
        v += a * dt
        y += v * dt
        t += dt

        pos.append(y - y_ancrage)  # position relative à l’ancrage
        vit.append(v)
        temps.append(t)

    return temps, pos, vit

# --- Cas 1 : assureur fixe, pas de mou ---
temps_a, positions_a, vitesses_a = simulate_chute(L0)

# --- Cas 2 : assureur fixe, avec mou ---
temps_b, positions_b, vitesses_b = simulate_chute(L0 + slack)

# --- Cas 3 : assureur qui saute ---
def mouvement_assureur(t):
    # Mouvement linéaire vers le haut (saut) sur 0.5s
    if t < 0.5:
        return -saut_assureur * t / 0.5
    else:
        return -saut_assureur

temps_c, positions_c, vitesses_c = simulate_chute(L0, mouvement_assureur)

# --- Affichage ---
plt.figure(figsize=(10, 6))

# Position
plt.subplot(2, 1, 1)
plt.plot(temps_a, positions_a, label="Assureur fixe, sans mou", color='blue')
plt.plot(temps_b, positions_b, label="Assureur fixe, avec mou", color='orange')
plt.plot(temps_c, positions_c, label="Assureur qui saute", color='green')
plt.ylabel("Position du grimpeur (m)")
plt.title("Comparaison des modèles de chute")
plt.legend()
plt.grid(True)

# Vitesse
plt.subplot(2, 1, 2)
plt.plot(temps_a, vitesses_a, label="Assureur fixe, sans mou", color='blue')
plt.plot(temps_b, vitesses_b, label="Assureur fixe, avec mou", color='orange')
plt.plot(temps_c, vitesses_c, label="Assureur qui saute", color='green')
plt.ylabel("Vitesse du grimpeur (m/s)")
plt.xlabel("Temps (s)")
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()
# il faut maintenant vérifié que les courbes obtenues soit coherente avec la theorie. es ce qu'on a bien une chute "soft" pour le mou et l'assureur actif et une chute plus "hard" pour l'assureur passif ?



# maintenant une version avec en plus la force subie par le grimpeur
#il reste des modifications à faire notamment sur le saut de l'assureur qui n'as pas l'effet escompté ainsi que l'amortissement

import numpy as np
import matplotlib.pyplot as plt

# --- Paramètres physiques ---
m = 70         # Masse du grimpeur (kg)
g = 9.81       # Gravité (m/s²)
L0 = 10        # Longueur de corde initiale (m)
LT = 45        # Longueur de corde totale
k = 1500       # Raideur de la corde (N/m)
b = 2 * np.sqrt(m * k)  # Amortissement critique
dt = 0.001     # Pas de temps (s)
Tmax = 5       # Durée de la simulation (s)
slack = 2      # Mou ajouté dans la corde (cas 2)
saut_assureur = 1  # Hauteur du saut de l'assureur (cas 3)

# --- Fonctions de simulation ---
def simulate_chute(L0_effectif, mouvement_point_fixe=None):
    y = 0
    v = 0
    t = 0
    pos = []
    vit = []
    temps = []
    force = []

    while t < Tmax:
        # Position du point d’ancrage (optionnel)
        if mouvement_point_fixe:
            y_ancrage = mouvement_point_fixe(t)
        else:
            y_ancrage = 0

        # Allongement de la corde (si tendue)
        extension = y - y_ancrage - L0_effectif
        if extension > 0:
            F_spring = -k * extension
            F_damping = -b * v
        else:
            F_spring = 0
            F_damping = 0

        F_tot = m * g + F_spring + F_damping
        F_subie = m * g - F_spring - F_damping
        a = F_tot / m
        v += a * dt
        y += v * dt
        t += dt

        pos.append(y - y_ancrage)  # position relative à l’ancrage
        vit.append(v)
        temps.append(t)
        force.append(F_subie)

    return temps, pos, vit, force

# --- Cas 1 : assureur fixe, pas de mou ---
temps_a, positions_a, vitesses_a, force_a = simulate_chute(L0)

# --- Cas 2 : assureur fixe, avec mou ---
temps_b, positions_b, vitesses_b, force_b = simulate_chute(L0 + slack)

# --- Cas 3 : assureur qui saute ---
def mouvement_assureur(t):
    # Mouvement linéaire vers le haut (saut) sur 0.5s
    if t < 0.5:
        return -saut_assureur * t / 0.5
    else:
        return -saut_assureur

temps_c, positions_c, vitesses_c, force_c = simulate_chute(L0, mouvement_assureur)

# --- Affichage ---
plt.figure(figsize=(10, 6))

# Position
plt.subplot(3, 1, 1)
plt.plot(temps_a, positions_a, label="Assureur fixe, sans mou", color='blue')
plt.plot(temps_b, positions_b, label="Assureur fixe, avec mou", color='orange')
plt.plot(temps_c, positions_c, label="Assureur qui saute", color='green')
plt.ylabel("Position du grimpeur (m)")
plt.title("Comparaison des modèles de chute")
plt.legend()
plt.grid(True)

# Vitesse
plt.subplot(3, 1, 2)
plt.plot(temps_a, vitesses_a, label="Assureur fixe, sans mou", color='blue')
plt.plot(temps_b, vitesses_b, label="Assureur fixe, avec mou", color='orange')
plt.plot(temps_c, vitesses_c, label="Assureur qui saute", color='green')
plt.ylabel("Vitesse du grimpeur (m/s)")
plt.xlabel("Temps (s)")
plt.legend()
plt.grid(True)

# Force subie par le grimpeur
plt.subplot(3, 1, 3)
plt.plot(temps_a, force_a, label="Assureur fixe, sans mou", color='blue')
plt.plot(temps_b, force_b, label="Assureur fixe, avec mou", color='orange')
plt.plot(temps_c, force_c, label="Assureur qui saute", color='green')
plt.ylabel("Force subie par le grimpeur (m)")
plt.title("Comparaison des modèles de chute")
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()
