##le code marche et ne fait pas bugger l'animation, je n'arrives pas à rendre e texte visible ou non et les légendes des graphiques sont peu lisibles

#importation des différentes bibliothèques nécessaires pour le code 
import numpy as np
import matplotlib.pyplot as plt # Pour faire des graphiques
import tkinter as tk # Pour créer une interface graphique (fenêtres, boutons, etc.)
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg # Pour afficher un graphique matplotlib dans une fenêtre tkinter
import matplotlib.animation as animation

# --- Fenêtre principale ---
#titre de la fenêtre
root = tk.Tk()
root.title("Simulation de chute en escalade")

# --- Cadre de contrôle (en haut) ---
frame_controls = tk.Frame(root)
frame_controls.pack(side=tk.TOP, pady=10)

# Ajout dans le cadre d'un menu où l'utilisateur choisit la masse du grimpeur 
tk.Label(frame_controls, text='Masse du grimpeur (kg)').pack() 
choixmasse = tk.Spinbox(frame_controls, from_=50, to=150, increment=0.5, width=5)
choixmasse.pack()

# Ajout dans le cadre d'un menu où l'utilisateur choisit la longueur de la corde
tk.Label(frame_controls, text='Longueur de la corde (m)').pack() 
longueurcorde = tk.Spinbox(frame_controls, from_=15, to=100, increment=0.5, width=5)
longueurcorde.pack()

# Ajout dans le cadre d'un menu où l'utilisateur choisit la longueur du mou donné au grimpeur lors de sa chute 
tk.Label(frame_controls, text='Corde supplémentaire/mou (m)').pack()
slack_entry = tk.Entry(frame_controls)
slack_entry.insert(0, "0")
slack_entry.pack()

# --- Cadres pour affichage des graphiques ---
frame_left = tk.Frame(root)
frame_left.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)

frame_right = tk.Frame(root)
frame_right.pack(side=tk.RIGHT, fill=tk.BOTH, expand=1)

# --- Graphiques matplotlib ---
#graphique de la position
fig_pos, ax_pos = plt.subplots()
canvas_pos = FigureCanvasTkAgg(fig_pos, master=frame_left)
canvas_pos.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

#graphique de la vitesse
fig_vitesse, ax_vitesse = plt.subplots()
canvas_vitesse = FigureCanvasTkAgg(fig_vitesse, master=frame_left)
canvas_vitesse.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

#l'animation
fig_anim, ax_anim = plt.subplots()
canvas_anim = FigureCanvasTkAgg(fig_anim, master=root)
canvas_anim.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH, expand=1)

#graphique de la force
fig_force, ax_force = plt.subplots()
canvas_force = FigureCanvasTkAgg(fig_force, master=frame_right)
canvas_force.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

# --- Texte indiquant si la chute est trop sévère ---
texte = tk.Text(root, height=100, width=500)
texte.pack(side=tk.TOP)

# --- Fonction principale ---

def start_animation(ax_pos, canvas_pos, ax_vitesse, canvas_vitesse, ax_anim, ax_force, canvas_force, canvas_anim, fig_anim):
    longueur_corde = float(longueurcorde.get()) #récupère la valeur choisit par l'utilisateur pour la longueur de la corde  
    poids_grimpeur = float(choixmasse.get()) #récupère la valeur choisit par l'utilisateur pour la masse du grimpeur 
    slack = float(slack_entry.get()) #récupère la valeur choisit par l'utilisateur pour la longueur du mou 

    m = poids_grimpeur
    g = 9.81
    L0 = longueur_corde
    k = 1500  # Constante de raideur de la corde (ressort)
    b = 2 * np.sqrt(m * k) # fonction amortissement critique
    dt = 0.005  # pas de temps utilisé pour la méthode d'Euler
    Tmax = 5 # durée totale de la simulation
    saut_assureur = 1 # hauteur du saut de l'assureur 

    def simulate_chute(L0_effectif, mouvement_point_fixe=None):    #fonction qui permet de déterminer à chaque instant la position, la vitesse et les forces appliquées sur le grimpeur
        #initialisation des données, on considère le grimpeur comme un point fixe avant sa chute 
        y = 0
        v = 0
        t = 0
        
        pos, vit, temps, force = [], [], [], [] #listes qui stockent les données calculées, initialement vides 

        while t < Tmax: # tant que le temps de la simulation est inférieur à la durée totale de la simulation :
            y_ancrage = mouvement_point_fixe(t) if mouvement_point_fixe else 0
            extension = y - y_ancrage - L0_effectif # allongement de la corde 
            F_spring = -k * extension if extension > 0 else 0 #  ressort ( force élastique de la corde) # lorsque la corde est tendue, elle se comporte comme un ressort qui suit une loi de Hook
            F_damping = -b * v if extension > 0 else 0  #amortissemnt linéaire visqueux 
            a = (m * g + F_spring + F_damping) / m # calcul de l'accélération, un PFD a été fait manuellement pour trouver cette fonction
            v += a * dt
            y += v * dt
            t += dt
            

            # Limiter la position du grimpeur à y >= 0
            if y < 0:
                y = 0
                v = 0  # Arrêter le mouvement vertical si y atteint 0 pour simuler un "atterrissage"

           # les données calculées par les fonctions sont mises dans les listes correspondantes 
            pos.append(y - y_ancrage)
            vit.append(v)
            temps.append(t)
            force.append(m * g - F_spring - F_damping) # la force subie par le grimpeur est la somme de son poids et des forces de rappel de la corde
            
        return temps, pos, vit, force         # nous avons maintenant accès à ces données sous forme de listes

    temps_a, positions_a, vitesses_a, force_a = simulate_chute(L0) #valeurs calculées lorsqu'il n'y pas de mou 
    temps_b, positions_b, vitesses_b, force_b = simulate_chute(L0 + slack) #  valeurs calculées lorsqu'il y a du mou qui est donné par l'assureur  

    def mouvement_assureur(t):     # modélise le saut que ferait l'assureur en freinant la chute de son camarade
        return -saut_assureur * t / 0.5 if t < 0.5 else -saut_assureur

    temps_c, positions_c, vitesses_c, force_c = simulate_chute(L0, mouvement_assureur) #valeurs calculées lorsque l'assureur saute 

    # --- Graphiques statiques ---
    # graphique des positions en fonction du temps, les 3 listes de positions sont tracées sur le même graphique
    ax_pos.clear()    # remise à 0 initiale
    ax_pos.plot(temps_a, positions_a, label="Sans mou", color='blue')   # position sans mou, dessiné en bleu
    ax_pos.plot(temps_b, positions_b, label="Avec mou", color='green')   # position avec du mou, dessiné en vert
    ax_pos.plot(temps_c, positions_c, label="Assureur saute", color='red')   # position avec le saut de l'assureur, dessiné en rouge
    ax_pos.set_xlabel("Temps (s)")    # dénomination des axes
    ax_pos.set_ylabel("Position (m)")
    ax_pos.legend()
    ax_pos.set_ylim(-10, L0 + slack + 2)   # valeurs limites pour l'axe vertical
    canvas_pos.draw()     # traçage du graphe

    #graphique des vitesses en fonction du temps, les 3 listes de vitesse sont tracées sur le même graphique
    ax_vitesse.clear()   # remise à 0 initiale
    ax_vitesse.plot(temps_a, vitesses_a, label="Sans mou", color='blue') # vitesse sans mou, dessiné en bleu
    ax_vitesse.plot(temps_b, vitesses_b, label="Avec mou", color='green') # vitesse avec du mou, dessiné en vert
    ax_vitesse.plot(temps_c, vitesses_c, label="Assureur saute", color='red') # vitesse avec le saut de l'assureur, dessiné en rouge
    ax_vitesse.set_xlabel("Temps (s)")     # dénomination des axes
    ax_vitesse.set_ylabel("Vitesse (m/s)")
    ax_vitesse.legend()
    ax_vitesse.set_ylim(min(min(vitesses_a), min(vitesses_b), min(vitesses_c)) - 1,       # valeurs limites pour l'axe vertical
                        max(max(vitesses_a), max(vitesses_b), max(vitesses_c)) + 1)
    canvas_vitesse.draw()      # traçage du graphe

    # graphique des forces subies par le grimpeur en fonction du temps, les 3 listes de forces sont tracées sur le même graphique 
    ax_force.clear()    # remise à 0 initiale
    ax_force.plot(temps_a, force_a, label="Sans mou", color='blue')     # forces sans mou, dessiné en bleu
    ax_force.plot(temps_b, force_b, label="Avec mou", color='green')   # forces avec du mou, dessiné en vert
    ax_force.plot(temps_c, force_c, label="Assureur saute", color='red')  # forces avec le saut de l'assureur, dessiné en rouge
    ax_force.set_xlabel("Temps (s)")   # dénomination des axes
    ax_force.set_ylabel("Force subie (N)")
    ax_force.legend()
    ax_force.set_ylim(0, max(max(force_a), max(force_b), max(force_c)) + 100)      # valeurs limites pour l'axe vertical
    canvas_force.draw()     # traçage du graphe

    # --- Animation ---
    ax_anim.clear()    # remise à 0 initiale
    ax_anim.set_xlim(1, 9) #largeur du cadre de l'animation
    ax_anim.set_ylim(L0 + slack + 12, -8)
                    
    #position des differents grimpeur sur l'animation
    x_sans_mou = 3
    x_avec_mou = 5
    x_assureur_saut = 7

    # Dégaines (points fixes à y=0)
    ax_anim.plot([x_sans_mou, x_avec_mou, x_assureur_saut], [0, 0, 0], '^', color='black', markersize=10, label="Dégaine")

    # Grimpeurs
    grimpeur_sans_mou, = ax_anim.plot([], [], 'bo', markersize=10, label="Sans mou")
    grimpeur_avec_mou, = ax_anim.plot([], [], 'go', markersize=10, label="Avec mou")
    grimpeur_assureur_saut, = ax_anim.plot([], [], 'ro', markersize=10, label="Assureur saute")

    # Assureurs
    assureur_sans_mou, = ax_anim.plot([x_sans_mou], [L0 + 10], 'ks', markersize=10)
    assureur_avec_mou, = ax_anim.plot([x_avec_mou], [L0 + 10], 'ks', markersize=10)
    assureur_saut, = ax_anim.plot([], [], 'ks', markersize=10, label="Assureur")

    # Cordes (2 segments par grimpeur)
    corde1_sans_mou, = ax_anim.plot([], [], 'b-', lw=2)
    corde2_sans_mou, = ax_anim.plot([], [], 'b-', lw=2)

    corde1_avec_mou, = ax_anim.plot([], [], 'g-', lw=2)
    corde2_avec_mou, = ax_anim.plot([], [], 'g-', lw=2)

    corde1_assureur_saut, = ax_anim.plot([], [], 'r-', lw=2)
    corde2_assureur_saut, = ax_anim.plot([], [], 'r-', lw=2)

    ax_anim.legend(fontsize=10)

    n_frames = len(positions_a)     # nombre total d'images dans l'animation = nombre de valeurs dans nos listes

    def update(frame):            # arrête l'animation si toutes les valeurs ont été utilisées
        if frame >= n_frames:
            return []

        # Positions verticales
        y_a = positions_a[frame]
        y_b = positions_b[frame]
        y_c = positions_c[frame]
        y_assureur_c = L0 + 10 + saut_assureur if frame >= int(0.5 / dt) else L0 + 10 + saut_assureur * frame * dt / 0.5

        # Mise à jour des données de la position des grimpeurs
        grimpeur_sans_mou.set_data([x_sans_mou], [y_a])
        grimpeur_avec_mou.set_data([x_avec_mou], [y_b])
        grimpeur_assureur_saut.set_data([x_assureur_saut], [y_c])

        # Mise à jour des données de la position de l'assureur qui saute
        assureur_saut.set_data([x_assureur_saut], [y_assureur_c])

        # Mise à jour de la longeur des cordes
        corde1_sans_mou.set_data([x_sans_mou, x_sans_mou], [y_a, 0])
        corde2_sans_mou.set_data([x_sans_mou, x_sans_mou], [0, L0 + 10])

        corde1_avec_mou.set_data([x_avec_mou, x_avec_mou], [y_b, 0])
        corde2_avec_mou.set_data([x_avec_mou, x_avec_mou], [0, L0 + 10 + slack])

        corde1_assureur_saut.set_data([x_assureur_saut, x_assureur_saut], [y_c, 0])
        corde2_assureur_saut.set_data([x_assureur_saut, x_assureur_saut], [0, y_assureur_c])

        return (
            grimpeur_sans_mou, grimpeur_avec_mou, grimpeur_assureur_saut,
            assureur_saut,
            corde1_sans_mou, corde2_sans_mou,
            corde1_avec_mou, corde2_avec_mou,
            corde1_assureur_saut, corde2_assureur_saut
        )

    ani = animation.FuncAnimation(fig_anim, update, frames=n_frames, interval=5, blit=True)
    canvas_anim.draw()


    def texte_danger():
        danger = 'false'
        for i in force_b:
            if i > 14000:
                danger = 'true'
        if danger == 'true':
            texte.insert(1.0, "Danger, risque de fracture")
        else:
            texte.insert(1.0, "Pas de risque majeur")

# --- Bouton lancer la simulation ---
btLancer = tk.Button(frame_controls, text="Lancer la simulation", command=lambda: start_animation(
    ax_pos, canvas_pos, ax_vitesse, canvas_vitesse,
    ax_anim, ax_force, canvas_force, canvas_anim, fig_anim
))
btLancer.pack(pady=10)



# --- Bouton quitter ---
btQuit = tk.Button(root, text='Quitter', command=root.destroy)
btQuit.pack(side=tk.BOTTOM, padx=10, pady=10)

# --- Lancement de l'interface ---
root.mainloop() 
