import matplotlib.pyplot as plt
import numpy as np

# Paramètres de la simulation
g = 9.81  # accélération due à la gravité (m/s^2)
t_final = 5.0  # temps final de la simulation (s)
dt = 0.001  # pas de temps (s)
r=0,6 # taille du corps 

# Conditions initiales
t = 0.0  # temps initial (s)
y0 = 20.0  # hauteur initiale (m)
v = 0.0  # vitesse initiale (m/s)

# Listes pour stocker les valeurs de temps et de position
temps = [t]
positions = [y0]

# Boucle principale de la simulation
while y0 > 0: # boucle tant que la particule n'a pas touché le sol 
    # Mettre à jour la vitesse et la position en utilisant la méthode d'Euler
    v = v - g * dt
    y0 = y0 + v * dt

    # Mettre à jour le temps
    t = t + dt

    # Ajouter les nouvelles valeurs à nos listes
    temps.append(t)
    positions.append(y0)

# Tracer la position en fonction du temps
plt.figure()
plt.plot(temps, positions)
plt.xlabel('Temps (s)')
plt.ylabel('Position (m)')
plt.title('Evolution d\'une particule en chute libre')
plt.grid(True)
plt.show

# autre methode avec en plus une interface sur Thinker 
import numpy as np
import tkinter as tk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.animation as animation

# Fonction pour démarrer l'animation
def start_animation():
    longueur_corde = float(entry_corde.get())
    poids_grimpeur = float(entry_poids.get())
    
    gravite = 9.81  # Accélération due à la gravité (m/s^2)
    temps_total = 3  # Durée totale de l'animation (s)
    n_frames = 100  # Nombre de frames dans l'animation
    dt = temps_total / n_frames  # Intervalle de temps entre chaque frame

    # Calcul des positions
    temps = np.linspace(0, temps_total, n_frames)
    y_positions = []
    vitesse, y = 0, 0

    for t in temps:
        if y > 0:
            vitesse += gravite * dt
            y += vitesse * dt
        else:
            vitesse = -vitesse * 0.5  # Simulation de l'effet d'amortissement
            y += vitesse * dt
        y_positions.append(y)

    # Mise à jour du graphique
    ax.clear()
    ax.plot(temps, y_positions, label="Chute du grimpeur")
    ax.set_xlabel("Temps (s)")
    ax.set_ylabel("Position (m)")
    ax.legend()
    canvas.draw()

# Création de l'interface Tkinter
root = tk.Tk()
root.title("Simulation de chute en escalade")

tk.Label(root, text="Longueur de la corde (m) :").pack()
entry_corde = tk.Entry(root)
entry_corde.pack()
entry_corde.insert(0, "5")

tk.Label(root, text="Poids du grimpeur (kg) :").pack()
entry_poids = tk.Entry(root)
entry_poids.pack()
entry_poids.insert(0, "70")

tk.Button(root, text="Lancer la simulation", command=start_animation).pack()

# Création de la figure Matplotlib
fig, ax = plt.subplots()
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack()

root.mainloop()

