from math import*
from matplotlib import*
import numpy as np
import matplotlib.pyplot as plt

def force(m,h,L):            #force appliquée sur le grimpeur pour une corde "moyenne" en fonction de sa masse, la hauteur de sa chute et la longueur de la corde qui le rattrappe
    g=9.81
    a=40000                  #facteur de résistance d'une corde "moyenne"
    indic=""
    F=(2*m*g*a*h/L)**(1/2)   #formule approchée de la résultante des forces appliquée sur le grimpeur
    if F>12000:              #si la force dépasse 12kN, la corde risque de céder
        indic="en danger"
    else:
        indic="en sécurité"
    return (F,indic)




def facteur(h,L):      #facteur de chute: rapport de la hauteur de la chute par la longueur de corde pour le rattrapper
    f=h/L
    return(f)







    def force2(m,h,L,S,Y):            #force appliquée sur le grimpeur pour une corde choisie en fonction de sa masse, la hauteur de sa chute et la longueur de la corde qui le rattrappe
    g=9.81                        #Y est le module d'Young de la corde, S est sa section
    indic=""
    F=(2*m*g*Y*S*h/L)**(1/2)   #formule approchée de la résultante des forces appliquée sur le grimpeur
    if F>12000:              #si la force dépasse 12kN, la corde risque de céder
        indic="en danger"
     else:
        indic="en sécurité"
    return (F,indic)





def fonction(m,h,L):                       #permet de tracer la vitesse et la position en f du temps
    y=h                                    #on définit les différentes constantes et conditions initiales
    g=9.81
    a=40000
    vy=0
    dt=0.001
    t=0
    dl=(2*m*g*h*L/a)**(1/2)               #longueur d'étirement maximal de la corde
    L1=[]                                 #listes qui vont accueillir les valeurs de vy, de y et de t
    L2=[]
    L3=[]

    while t<15:                           
        if y>0:                          #si y>0, la corde d'applique pas de force de rappel, c'est une chute libre       
            vy=vy-g*dt
            y=y+vy*dt
            t=t+dt
            L1.append(vy)
            L2.append(y)
            L3.append(t)
            
        if y<0:                          #si y<0, il y a le poids et le rappel de la corde
            vy=vy+(-g-a*y/(L*m))*dt
            y=y+vy*dt
            t=t+dt
            L1.append(vy)
            L2.append(y)
            L3.append(t)
    plt.plot(L3,L1)
    plt.plot(L3,L2)

def elasticite(m,e): # constante elastique de la corde avec e le coef elastique de la corde 
    k=m/e
    return(k)

# Simulation du mouvement (oscillation après la chute)
    t = np.linspace(0, 5, 100)
    displacement = h * np.cos(np.sqrt(elasticite(m,e)) * t) * np.exp(-0.3 * t)  # Amortissement approximatif
    
    plt.plot(L3,L1)
    plt.plot(L3,L2)
    # Affichage du graphe
    plt.figure(figsize=(8, 5))
    plt.plot(t, displacement, label="Mouvement après chute")
    plt.axhline(0, color='r', linestyle='--', label="Point d'arrêt")
    plt.xlabel("Temps (s)")
    plt.ylabel("Position (m)")
    plt.title("Simulation de chute en escalade")
    plt.legend()
    plt.show()
    
